# Extend Password #

# Admin Check #

If (!([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]'Administrator')) {
    Write-Host "You must run this as admin within PowerShell or PowerShell ISE."
    Start-Process powershell_ise.exe -ArgumentList ("Script location") -Verb RunAs
    Start-sleep -s 10
    Exit
}

$ErrorActionPreference = 'silentlycontinue'

param(

[string]$ScriptName = 'Get Hostname IP',
[string]$ScriptAuthor = 'LJK'

)

# Initialize the password extend function and tasks #

function ExtendPassword{

# User must input the username through console #

$Username = Read-Host -Prompt 'Input the username'

# Below will do a Try and Catch - if username entered does not exist on AD then error will be caught. This will let user know that the username is invalid #

Try{
$Variable = Get-ADUser -Identity $username -properties pwdlastset 
}Catch{
Write-Host "You have input an invalid username. Ending script." -ForegroundColor Cyan
Break
}

# Return with below if username is valid #

Write-host "Username found - valid user." -ForegroundColor Green

# Extending the password - setting to 0 and then to -1 #

$Variable.pwdlastset = 0 
Set-ADUser -Instance $Variable 
$Variable.pwdlastset = -1 
Set-ADUser -instance $Variable 

# Get the four details we want from getting the net user and initialize as seperate variables #

$Detail1 = Net user $Username /Domain | Find /i "User name" 
$Detail2 = Net user $Username /Domain | Find /i "Full name" 
$Detail3 = Net user $Username /Domain | Find /i "Password last set" 
$Detail4 = Net user $Username /Domain | Find /i "Password expires" 

# Put the variables together into one for next function to take as single string entity #

$FullDetails = Write-output " $Detail1 `n $Detail2 `n $Detail3 `n $Detail4"

# Set clipboard function initialized below #

function set-clipboard{
        param(
            [parameter(position=0,mandatory=$true,ValueFromPipeline=$true)]$Text
        )
        begin{
            $data = [system.text.stringbuilder]::new() # Start new string to be put onto clipboard #
        }

        process{
            if ($text){
                [void]$data.appendline($text) # Append text #
            }
        }

        end{
            if ($data){
                $data.tostring().trimend([environment]::newline) + [convert]::tochar(0) | clip.exe
            }
        }

}

"$FullDetails" | Set-Clipboard # Set-clipboard function run against the $FullDetails variable which holds series of String #
Write-Host "The details for $($Username) has been copied to your clipboard." -ForegroundColor Green

Start-Sleep -s 2

}

# Call function #
ExtendPassword
