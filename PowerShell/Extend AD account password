<#

Script name: Extend AD account password
Author: LJK
Version: 1.0
Description: Extends user account password and then copies relevant information to clipboard for response back to user

#>

function ExtendPassword{

param(

[string]$ScriptName = 'Extend_Password',
[string]$ScriptAuthor = 'LJK'

)

$Username = Read-Host -Prompt 'Input the username'

Try{
$Variable = Get-ADUser -Identity $username -properties pwdlastset 
}Catch{
Write-Host "You have input an invalid username. Ending script." -ForegroundColor Cyan
Break
}


Write-host "Username found - valid user." -ForegroundColor Green


$Variable.pwdlastset = 0 
Set-ADUser -Instance $Variable 
$Variable.pwdlastset = -1 
Set-ADUser -Instance $Variable 

$Detail1 = Net user $Username /Domain | Find /i "User name" 
$Detail2 = Net user $Username /Domain | Find /i "Full name" 
$Detail3 = Net user $Username /Domain | Find /i "Password last set" 
$Detail4 = Net user $Username /Domain | Find /i "Password expires" 


$FullDetails = Write-output " $Detail1 `n $Detail2 `n $Detail3 `n $Detail4"


function set-clipboard{
        param(
            [parameter(position=0,mandatory=$true,ValueFromPipeline=$true)]$Text
        )
        begin{
            $data = [system.text.stringbuilder]::new() 
        }

        process{
            if ($text){
                [void]$data.appendline($text) 
            }
        }

        end{
            if ($data){
                $data.tostring().trimend([environment]::newline) + [convert]::tochar(0) | clip.exe
            }
        }

}

"$FullDetails" | Set-Clipboard 
Write-Host "The details for $($Username) has been copied to your clipboard now to use as solution." -ForegroundColor Green

Start-Sleep -s 2

}

ExtendPassword
